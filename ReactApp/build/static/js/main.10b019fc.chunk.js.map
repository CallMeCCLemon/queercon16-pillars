{"version":3,"sources":["Config.js","PledgeDisplay.jsx","RecentDisplay.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Config","apiEndpoint","apiInterval","currencyType","icons","0","1","2","3","4","5","recent_limit","goal","PledgeDisplay","props","nf","Intl","NumberFormat","_useState","useState","_useState2","Object","slicedToArray","curVal","setVal","_useState3","_useState4","interval","setIntervalId","useEffect","f","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","res","val","wrap","_context","prev","next","console","log","badgeType","fetch","concat","sent","text","parseInt","stop","apply","this","arguments","clearInterval","setInterval","react_default","createElement","className","src","icon","style","paddingLeft","format","RecentDisplay","curRecents","setRecents","JSON","parse","entries","map","v","i","key","badge_id","badge_type","currency_type","quantity","App","curCurrency","setCurrency","hotkeys","event","handler","preventDefault","c","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.10b019fc.chunk.js","sourcesContent":["export default {\n    // NO TRAILING SLASH\n    apiEndpoint: \"http://localhost:8090\",\n\n    // number of milliseconds between requests\n    apiInterval: 1000,\n\n    // selects which pair of currencies to display\n    // 0 == LOCKS, KEYS\n    // 1 == COINS, COCKTAILS\n    // 2 == CAMERA, FLAG\n    currencyType: 0,\n\n    icons: {\n        0: \"/static/lock.png\",\n        1: \"/static/coin.png\",\n        2: \"/static/camera.png\",\n        3: \"/static/key.png\",\n        4: \"/static/cocktail.png\",\n        5: \"/static/flag.png\"\n    },\n\n    recent_limit: 6,\n\n    goal: 25000\n}","import React, { useEffect, useState } from 'react';\n\nimport Config from './Config';\n\nexport default function(props) {\n    var nf = new Intl.NumberFormat();\n\n    const [curVal, setVal] = useState(0);\n    const [interval, setIntervalId] = useState(null);\n\n    useEffect(() => {\n        const f = async function() {\n            console.log(props.badgeType, props.currencyType);\n            let res = await fetch(\n                Config.apiEndpoint +\n                    `/getTotal/${props.badgeType}/${props.currencyType}/`,\n            );\n\n            // total currency is summed and returned from server\n            res = await res.text();\n\n            let val = parseInt(res);\n            if (val > Config.goal) {\n                val = Config.goal;\n            }\n            setVal(val);\n        };\n\n        if (interval != null) {\n            clearInterval(interval);\n        }\n        setIntervalId(setInterval(f, Config.apiInterval));\n    }, [props.badgeType, props.currencyType]);\n\n    return (\n        <div className=\"pledge-container bright-text\">\n            <div className=\"pledge-title\">\n                <div className={'icon'}>\n                    <img src={props.icon} />\n                </div>\n                <div style={{ paddingLeft: '50px' }}>{nf.format(curVal)}</div>\n            </div>\n            <div className=\"pledge-subtitle gray-text\">\n                pledged of{' '}\n                <span className=\"bright-text\">{nf.format(props.goal)}</span>{' '}\n                goal\n            </div>\n        </div>\n    );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport Config from './Config';\n\nexport default function(props) {\n    const [curRecents, setRecents] = useState([]);\n    const [interval, setIntervalId] = useState(null);\n\n    useEffect(() => {\n        const f = async function() {\n            let res = await fetch(\n                Config.apiEndpoint +\n                    `/recent/${props.currencyType}/${props.currencyType + 3}/${\n                        Config.recent_limit\n                    }/`,\n            );\n\n            // total currency is summed and returned from server\n            res = await res.text();\n\n            setRecents(JSON.parse(res));\n        };\n\n        if (interval != null) {\n            clearInterval(interval);\n        }\n        setIntervalId(setInterval(f, Config.apiInterval));\n    }, [props.badgeType, props.currencyType]);\n\n    const entries = curRecents.map((v, i) => {\n        return (\n            <tr key={i}>\n                <td>{v.badge_id}</td>\n                <td>{v.badge_type}</td>\n                <td>\n                    <div className=\"currency-display\">\n                        <div className={'icon-small'}>\n                            <img src={Config.icons[v.currency_type]} />\n                        </div>\n                        <div style={{ paddingLeft: '5px' }}>{v.quantity}</div>\n                    </div>\n                </td>\n            </tr>\n        );\n    });\n    return (\n        <table className=\"recent-container\">\n            <thead>\n                <tr>\n                    <th>Id</th>\n                    <th>Type</th>\n                    <th>Amount</th>\n                </tr>\n            </thead>\n            <tbody>{entries}</tbody>\n        </table>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Config from './Config';\n\nimport PledgeDisplay from './PledgeDisplay.jsx';\nimport hotkeys from 'hotkeys-js';\nimport RecentDisplay from './RecentDisplay';\n\nfunction App() {\n    const [curCurrency, setCurrency] = useState(0);\n\n    useEffect(() => {\n        hotkeys('ctrl+a', function(event, handler) {\n            // Prevent the default refresh event under WINDOWS system\n            event.preventDefault();\n            setCurrency((c) => {\n                if (c + 1 == 3) {\n                    return 0;\n                } else {\n                    return c + 1;\n                }\n            });\n        });\n\n        setCurrency(Config.currencyType);\n    }, []);\n    return (\n        <div className=\"App\">\n            <div className=\"Padding\" />\n            <div className=\"Pledges\">\n                <PledgeDisplay\n                    badgeType=\"Q\"\n                    currencyType={curCurrency}\n                    goal={Config.goal}\n                    icon={Config.icons[curCurrency]}\n                />\n                <PledgeDisplay\n                    badgeType=\"C\"\n                    currencyType={curCurrency + 3}\n                    goal={Config.goal}\n                    icon={Config.icons[curCurrency + 3]}\n                />\n            </div>\n            <div className=\"Recents\">\n                <div className=\"recents-title\">Recent</div>\n                <div className=\"divider-line\" />\n                <RecentDisplay currencyType={curCurrency} />\n            </div>\n            <div className=\"Padding\" />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}